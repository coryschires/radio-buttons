= Radio Buttons Canvas

Radio Button Canvas is an unusual (and totally useless) jQuery plug that creates a matrix of radio buttons. A blank canvas looks like this: 

http://coryschires-blog-post-images.s3.amazonaws.com/radio_button_canvas/blank.png

All tightly packed together, you can think of the buttons as pixels which you can use to create simple animations, pictures, and even games. You can see a few examples on the {demo page}[radio-buttons.coryschires.com]. 

I'm working on a basic API which makes creating your own radio-button projects quite a bit easier. It's still pretty rough and minimally-featured. Any contributions would be great, so feel free to fork it and mess around.

<em>Note: This plugin is still being actively developed. The API will almost certainly change rapidly and without notice. It's far from production ready.</em>

== Getting started.

Obviously, you'll need to include the necessary scripts in your <tt>head</tt> element:

    <script src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.4/jquery.min.js" type="text/javascript"></script>
    <script src="jquery.radio_button_canvas.js" type="text/javascript" charset="utf-8"></script>

Next, you need initialize your radio button canvas. It's pretty simple. Call it like any other jQuery plugin, but be sure to store the returned value in a variable. We'll need it later.
    
    var canvas = $('#canvas').radio_button_canvas();

You can also pass configuration options to specify the canvas width or height:

    var canvas = $('#canvas').radio_button_canvas({
        width: 500,     // defaults to $(window).width(),
        height: 350     // defaults to $(window).height()
    });

After creating the canvas you have a lot of flexibility to draw whatever you like. However, I've included a really basic API to help speed things along. For example, let's add a point to our canvas:

    var canvas = $('#canvas').radio_button_canvas();    // call the plugin canvas
    canvas.point(5,5);                                  // create a point

And then we have a point:

http://coryschires-blog-post-images.s3.amazonaws.com/radio_button_canvas/point.png

You can also draw lines:

    canvas.line(2,2, 8,5);

Which produces:

http://coryschires-blog-post-images.s3.amazonaws.com/radio_button_canvas/line.png

Also, all methods return something sensible to allow chaining. Points, for example, return <tt>self</tt> allowing you to do things like:

    canvas.point(5,5).move('north').uncheck();

All shapes, such as lines, return an object which contains the array of points that constitute the shape. Shapes come packed with a bunch of methods which allow you to manipulate the entire shape at once. For example, let's draw a line and slowly move it eastward across the canvas:

    var line = canvas.line(2,2, 8,5);   // draw the line

    setInterval(function() {            // move it east
      line.move('east');
    }, 200);

There's the basic idea. Now let's look more closely at the API.

== Points.

Create a point by specifying an <tt>x</tt> and <tt>y</tt>:
    
    var point = canvas.point(5,5); // arguments => x, y

When initialized, a point comes checked by default. Here are some basic methods for checking and unchecking points:

    point.check();          // returns self
    point.uncheck();        // returns self
    point.is_checked();     // returns boolean

You can find other points relative to an existing point using the <tt>neighbor</tt> function:
    
    // using ordinal coordinates
    point.neighbor('north'); // always returns neighboring point
    point.neighbor('south');
    point.neighbor('east');
    point.neighbor('west');
    
    // using cartesian coordinates 
    point.neighbor(0, -2);  // returns point two north
    point.neighbor(1, 2);   // returns point two south and one east

Finally points have a <tt>move</tt> function. This takes the same arguments as the <tt>neighbor</tt> function:

    point.move('north'); // moves the point up one

Under the hood, in fact, <tt>move</tt> uses <tt>neighbor</tt> to do the heavy lifting. Unlike <tt>neighbor</tt>, however, <tt>move</tt> unchecks the current point before moving to a new location.

== Lines.

I'll be improving this section as I continue to develop the API. If you're really eager to see how things work, I'd suggest having a look at the unit tests. They do a fairly good job specifying the code.



